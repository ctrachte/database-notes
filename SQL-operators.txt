Write out a generic SELECT statement.

    SELECT <column1, column2, ... *>
    FROM <table1, table2 ...>
    <optional: WHERE <condition>>

Create a fun way to remember the order of operations in a SELECT statement, such as a mnemonic.

- The way I remember the order of operations (this may not be correct) is: 
 1.) What? <what data?>
 2.) Where? <what table?>
 3.) How? <conditions?>


Given this dogs table, write queries to select the following pieces of data:

CREATE TABLE dogs (
  "id"          INTEGER, 
  "name"        VARCHAR(25),
  "gender"      VARCHAR(1),
  "age"         INTEGER,
  "weight"      INTEGER,
  "breed"       TEXT,
  "intake_date" DATE,
  "in_foster"   DATE
);

INSERT INTO dogs
  ("id",  "name",      "gender", "age", "weight", "breed",              "intake_date", "in_foster")
VALUES
  (10001, 'Boujee',    'F',       3,     36,      'labrador poodle',    '2017-06-22',   null),
  (10002, 'Munchkin',  'F',       0,     8,       'dachsund chihuahua', '2017-01-13',  '2017-01-31'),
  (10004, 'Marley',    'M',       0,     10,      'labrador',           '2017-05-04',  '2016-06-20'),
  (10003, 'Lassie',    'F',       7,     17,      'collie shepherd',    '2016-07-05',  '2017-07-22'),
  (10006, 'Marmaduke', 'M',       7,     150,     'great dane',         '2016-03-22',  '2016-05-15'),
  (10007, 'Rosco',     'M',       5,     180,     'rottweiler',         '2017-04-01',   null);



Intake teams typically guess the breed of shelter dogs, so the breed column may have multiple words (for example, "Labrador Collie mix").

Display the name, gender, and age of all dogs that are part Labrador.

    SELECT name, gender, age
    FROM dogs
    WHERE breed LIKE '%labrador%';

Display the ids of all dogs that are under 1 year old.

    SELECT id
    FROM dogs
    WHERE age < 1;


Display the name and age of all dogs that are female and over 35lbs.

    SELECT name, age
    FROM dogs
    WHERE gender = 'F' AND weight > 35;

Display all of the information about all dogs that are not Shepherd mixes.

    SELECT *
    FROM dogs
    WHERE breed NOT LIKE '%shepherd%';

Display the id, age, weight, and breed of all dogs that are either over 60lbs or Great Danes.

    SELECT id, age, weight, breed
    FROM dogs
    WHERE breed LIKE '%great dane%' OR weight > 60;

Given this cats table, what records are returned from these queries?

SELECT name, adoption_date FROM cats;

	name	adoption_date
	Mushi	2016-03-22
	Seashell	(null)
	Azul	2016-04-17
	Victoire	2016-09-01
	Nala	(null)

SELECT name, age FROM cats;

	name	age
	Mushi	1
	Seashell	7
	Azul	3
	Victoire	7
	Nala	1

From the cats table, write queries to select the following pieces of data.

Display all the information about all of the available cats.

	SELECT * FROM cats;

Choose one cat of each age to show to potential adopters.

	SELECT name 
	FROM cats
	WHERE gender = 'M';


Find all of the names of the cats, so you don’t choose duplicate names for new cats.

	SELECT name 
	FROM cats;

List each comparison operator and explain when you would use it. Include a real world example for each.

"<"  (LESS THAN) used to check if a value is less than another value.
- we want to select all cats younger than 3

">"  (GREATER THAN) used to check if a value is greater than another value. 
- we want to select all cats older than 3

">="  (GREATER THAN OR EQUAL) used to check if a value is greater than or equal to another value. 
- we want to select all cats that are 1 year or older

"<="  (LESS THAN OR EQUAL) used to check if a value is less than or equal to another value. 
- we want to select all cats that are 3 years or older

"="  (EQUALS) used to check if a value is equal to another value. 
- we want to find all cats taken in last thursday.

"!="  (NOT EQUALS) used to check if a value not equal to another value.
- we want to find all purebred labrador dogs not mixed with poodle.

"<>" (GREATER THAN OR LESS THAN) two values are equal, if they arent, returns true.
- we want to select all dogs that are not puppies (0 years old).

"LIKE" used to check if a pattern matches in a string.
- we want to find all dachsunds and dachsund mixes from the dogs table

"BETWEEN" used to check if a value is between two values.
- we want to find someone a medium size dog.

"IS TRUE / IS FALSE" used to check boolean values.
- we want to help someone find a cat that is fixed.

"IS NULL" used to check if a value is null.
- we want to find a dog that is not in foster care

"AND" used to chain conditions together, all must be true.
- we want to find a dog that is not in foster care and is younger than 3

"OR" used to chain conditions together, only one must be true.
- we want to find a dog that is not in foster care or is younger than 3

"NOT" used to assert condition is false.
- we want to find a dog that is not any part labrador

"IS DISTINCT FROM" used instead of "<>" when one condition might be null.
- we want to select all dogs where the adoption date is different from the intake date.

From the cats table, what data is returned from these queries?

SELECT name FROM cats WHERE gender = ‘F’;
- ‘’ corrected to '' produce the output below:
	name
	Seashell
	Nala

SELECT name FROM cats WHERE age <> 3;

	name
	Mushi
	Seashell
	Victoire
	Nala

SELECT ID FROM cats WHERE name != ‘Mushi’ AND gender = ‘M’;
- ‘’ corrected to '' produce the output below:

	id
	3
	4